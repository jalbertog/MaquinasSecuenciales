LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
 
ENTITY TB_secdeca IS
END TB_secdeca;
 
ARCHITECTURE behavior OF TB_secdeca IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT secdeca
    PORT(
         x : IN  std_logic;
         reset : IN  std_logic;
         clk : IN  std_logic;
			nextstate: OUT std_logic_vector (1 downto 0);
         current_state: OUT std_logic_vector (1 downto 0);
			z : OUT  std_logic
        );
    END COMPONENT;
    

   --Inputs
   signal x : std_logic := '0';
   signal reset : std_logic := '1';
   signal clk : std_logic := '0';

 	--Outputs
   signal z : std_logic;
	signal nextstate : std_logic_vector (1 downto 0);
	signal current_state: std_logic_vector (1 downto 0);

   -- Clock period definitions
   constant clk_period : time := 10 ns;
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: secdeca PORT MAP (
          x => x,
          reset => reset,
          clk => clk,
			 nextstate => nextstate,
			 current_state => current_state,
          z => z
        );

   -- Clock process definitions
   clk_process :process
   begin
		clk <= '0';
		wait for clk_period/2;
		clk <= '1';
		wait for clk_period/2;
   end process;
 

   -- Stimulus process
   stim_proc: process
   begin		
      -- hold reset state for 100 ns.
      wait for 100 ns;	
		reset <= '0';
      wait for clk_period*10;

      -- insert stimulus here 
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 5 ns;--Wait for half the clock period since it is a mealy's machine
		
	
		assert z = '1' report "Detector Failed"; --Sequence Met!
				
		wait for 5 ns;--Wait for half the clock period since it is a mealy's machine
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '0'; wait for 5 ns; --Wait for half the clock period since it is a mealy's machine
								
		
		assert z = '1' report "Detector Failed"; --Sequence Met!
		
		wait for 5 ns;--Wait for another half clock period to give the pulse the usual width
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 5 ns;--Wait for half the clock period since it is a mealy's machine
		
		
		assert z = '1' report "Detector Failed"; --Sequence Met!
		
		wait for 5 ns;--Wait for half the clock period since it is a mealy's machine
		--------------------------
		x <= '1'; wait for 10 ns; 
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
				--------------------------
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		report "ATTENTION!: This is a self-cheking Test Bench. If no 'Detector Failed' message is prompted, it means that the detector fully succeded!";

      wait;
   end process;

END;
-- VHDL Test Bench Created by ISE for module: secdeca
-- 
-- Dependencies:
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Notes: 
-- This testbench has been automatically generated using types std_logic and
-- std_logic_vector for the ports of the unit under test.  Xilinx recommends
-- that these types always be used for the top-level I/O of a design in order
-- to guarantee that the testbench will bind correctly to the post-implementation 
-- simulation model.
--------------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
 
ENTITY TB_secdeca IS
END TB_secdeca;
 
ARCHITECTURE behavior OF TB_secdeca IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT secdeca
    PORT(
         x : IN  std_logic;
         reset : IN  std_logic;
         clk : IN  std_logic;
			nextstate: OUT std_logic_vector (1 downto 0);
         current_state: OUT std_logic_vector (1 downto 0);
			z : OUT  std_logic
        );
    END COMPONENT;
    

   --Inputs
   signal x : std_logic := '0';
   signal reset : std_logic := '1';
   signal clk : std_logic := '0';

 	--Outputs
   signal z : std_logic;
	signal nextstate : std_logic_vector (1 downto 0);
	signal current_state: std_logic_vector (1 downto 0);

   -- Clock period definitions
   constant clk_period : time := 10 ns;
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: secdeca PORT MAP (
          x => x,
          reset => reset,
          clk => clk,
			 nextstate => nextstate,
			 current_state => current_state,
          z => z
        );

   -- Clock process definitions
   clk_process :process
   begin
		clk <= '0';
		wait for clk_period/2;
		clk <= '1';
		wait for clk_period/2;
   end process;
 

   -- Stimulus process
   stim_proc: process
   begin		
      -- hold reset state for 100 ns.
      wait for 100 ns;	
		reset <= '0';
      wait for clk_period*10;

      -- insert stimulus here 
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 5 ns;--Wait for half the clock period since it is a mealy's machine
		
	
		assert z = '1' report "Detector Failed"; --Sequence Met!
				
		wait for 5 ns;--Wait for half the clock period since it is a mealy's machine
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '0'; wait for 5 ns; --Wait for half the clock period since it is a mealy's machine
								
		
		assert z = '1' report "Detector Failed"; --Sequence Met!
		
		wait for 5 ns;--Wait for another half clock period to give the pulse the usual width
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 5 ns;--Wait for half the clock period since it is a mealy's machine
		
		
		assert z = '1' report "Detector Failed"; --Sequence Met!
		
		wait for 5 ns;--Wait for half the clock period since it is a mealy's machine
		--------------------------
		x <= '1'; wait for 10 ns; 
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
				--------------------------
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '0'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		x <= '1'; wait for 10 ns;
		assert z = '0' report "Detector Failed";
		--------------------------
		report "ATTENTION!: This is a self-cheking Test Bench. If no 'Detector Failed' message is prompted, it means that the detector fully succeded!";

      wait;
   end process;

END;
